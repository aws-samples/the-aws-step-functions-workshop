---
title : "Exploring MAP and Choice states"
weight : 10
---

Dynamically iterate a series of steps by passing an array to a Map state (AWS Lambda, Amazon SQS, Amazon SNS, Amazon DynamoDB).

The Map state ("Type": "Map") can be used to run a set of steps for each element of an input array. While the Parallel state executes multiple branches of steps using the same input, a Map state will execute the same steps for multiple entries of an array in the state input.

A Choice state ("Type": "Choice") adds branching logic to a state machine.

Steps to implement the exercise in state definition (ASL - Amazon States Language) :

- Read messages from SQS queue by calling a lambda function which performs an API call to SQS to read the message from.
- Implement a 'Choice state', if there are no messages finish processing.
- If there are messages then implement a 'Map state' to read these messages and iterate by inserting them in a DynamoDB table.
- Remove the messages from the SQS queue by invoking a lambda function.
- Publish message to SNS topic.

HINT: This project needs creation of the following services. Step Functions uses an AWS Lambda function to pull messages off an Amazon SQS queue, and pass a JSON array of those message to a Map state. For each message in the queue, the state machine writes the message to DynamoDB, invokes the other Lambda function to remove the message from Amazon SQS, and then publishes the message to the Amazon SNS topic.

- Two AWS Lambda functions

- An Amazon Simple Queue Service (Amazon SQS) queue

- An Amazon Simple Notification Service (Amazon SNS) topic

- An Amazon DynamoDB table

- An AWS Step Functions state machine
