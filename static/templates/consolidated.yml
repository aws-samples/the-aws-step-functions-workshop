AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Step Functions Modules
Resources:
  M1StatesExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'

  M1TimerStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: |-
        {
          "Comment": "An example of the Amazon States Language for scheduling a task.",
          "StartAt": "Wait for Timer",
          "States": {
            "Wait for Timer": {
              "Type": "Wait",
              "SecondsPath": "$.timer_seconds",
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt [M1StatesExecutionRole, Arn]

  M2SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'RequestResponseTopic'

  M2StatesExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref M2SNSTopic

  M2RequestResponseStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "An example of the Amazon States Language for scheduling a task.",
            "StartAt": "Wait for Timestamp",
            "States": {
              "Wait for Timestamp": {
                "Type": "Wait",
                "SecondsPath": "$.timer_seconds",
                "Next": "Send SNS Message"
              },
              "Send SNS Message": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters":{  
                  "TopicArn": "${topicArn}",
                  "Message":"Hello from Step Functions!"
                },
                "End": true
              }
            }
          }
        - { topicArn: !Ref M2SNSTopic }
      RoleArn: !GetAtt [M2StatesExecutionRole, Arn]

  M3BatchJobNotificationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt [M3BatchJobNotificationExecutionRole, Arn]
      DefinitionString: !Sub
        - |-
          {
            "Comment": "An example of the Amazon States Language for notification on an AWS Batch job completion",
            "StartAt": "Submit Batch Job",
            "TimeoutSeconds": 3600,
            "States": {
              "Submit Batch Job": {
                "Type": "Task",
                "Resource": "arn:aws:states:::batch:submitJob",
                "Parameters": {
                  "JobName": "BatchJobNotification",
                  "JobQueue": "${jobQueueArn}",
                  "JobDefinition": "${jobDefinitionArn}"
                },
                "Next": "Notify Success",
                "Retry": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "IntervalSeconds": 30,
                      "MaxAttempts": 2,
                      "BackoffRate": 1.5
                    }
                ],
                "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "Next": "Notify Failure"
                    }
                ]
              },
              "Notify Success": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": "Batch job submitted through Step Functions succeeded",
                  "TopicArn": "${snsTopicArn}"
                },
                "End": true
              },
              "Notify Failure": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": "Batch job submitted through Step Functions failed",
                  "TopicArn": "${snsTopicArn}"
                },
                "End": true
              }
            }
          }
        - {
            snsTopicArn: !Ref M3SNSTopic,
            jobQueueArn: !Ref M3BatchJobQueue,
            jobDefinitionArn: !Ref M3BatchJobDefinition,
          }
  M3BatchJobNotificationExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: BatchJobNotificationAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref M3SNSTopic
              - Effect: Allow
                Action:
                  - 'batch:SubmitJob'
                  - 'batch:DescribeJobs'
                  - 'batch:TerminateJob'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'events:PutTargets'
                  - 'events:PutRule'
                  - 'events:DescribeRule'
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule'
  M3SNSTopic:
    Type: AWS::SNS::Topic
  M3BatchVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  M3BatchInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: M3BatchVPC
  M3PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - M3BatchVPC
      - M3BatchVPCGatewayAttachment
    Properties:
      VpcId:
        Ref: M3BatchVPC
  M3BatchVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - M3BatchVPC
      - M3BatchInternetGateway
    Properties:
      VpcId:
        Ref: M3BatchVPC
      InternetGatewayId:
        Ref: M3BatchInternetGateway
  M3BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      GroupDescription: A security group for region-agnostic Batch resources
      VpcId:
        Ref: M3BatchVPC
  M3BatchSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: M3BatchVPCGatewayAttachment
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: M3BatchVPC
      MapPublicIpOnLaunch: 'True'
  M3PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - M3PublicRouteTable
      - M3BatchVPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: M3PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: M3BatchInternetGateway
  M3BatchSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: M3PublicRouteTable
      SubnetId:
        Ref: M3BatchSubnet
  M3BatchAWSBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  M3BatchIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: M3BatchEcsInstanceRole
  M3BatchEcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  M3BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image:
          Fn::Join:
            - ''
            - - 137112412989.dkr.ecr.
              - Ref: AWS::Region
              - '.amazonaws.com/amazonlinux:latest'
        Vcpus: 2
        Memory: 2000
        Command:
          - echo
          - Hello world
      RetryStrategy:
        Attempts: 1
  M3BatchJobQueue:
    Type: AWS::Batch::JobQueue
    DependsOn:
      - M3BatchComputeEnvironment
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: M3BatchComputeEnvironment
  M3BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn:
      - M3BatchSubnet
      - M3BatchSecurityGroup
      - M3BatchIamInstanceProfile
      - M3BatchAWSBatchServiceRole
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 64
        InstanceTypes:
          - optimal
        Subnets:
          - Ref: M3BatchSubnet
        SecurityGroupIds:
          - Ref: M3BatchSecurityGroup
        InstanceRole:
          Ref: M3BatchIamInstanceProfile
      ServiceRole:
        Ref: M3BatchAWSBatchServiceRole

  M4LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SQSReceiveMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:ChangeMessageVisibility'
                Resource: !GetAtt [M4SQSQueue, Arn]
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:*:*:*'
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'states:SendTaskSuccess'
                  - 'states:SendTaskFailure'
                Resource: !Ref M4WaitForCallbackStateMachine

  M4SQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [M4SQSQueueDLQ, Arn]
        maxReceiveCount: 1

  M4SQSQueueDLQ:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 30

  M4SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'StepFunctionsTemplate-CallbackTopic'

  M4LambdaFunctionEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt [M4SQSQueue, Arn]
      FunctionName: !GetAtt [M4CallbackWithTaskToken, Arn]

  M4CallbackWithTaskToken:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt [M4LambdaExecutionRole, Arn]
      Code:
        ZipFile: |

          /**
              MIT No Attribution
              
              Copyright 2021 Amazon Web Services
              
              Permission is hereby granted, free of charge, to any person obtaining a copy of this
              software and associated documentation files (the "Software"), to deal in the Software
              without restriction, including without limitation the rights to use, copy, modify,
              merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
              permit persons to whom the Software is furnished to do so.
              
              THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
              INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
              PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
              HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
              OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
              SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
          */

          console.log('Loading function');

          var AWS = require('aws-sdk');
          var stepfunctions = new AWS.StepFunctions({apiVersion: '2016-11-23'});

          exports.lambda_handler = async(event, context, callback) => {

              for (const record of event.Records) {
                  const messageBody = JSON.parse(record.body);
                  const taskToken = messageBody.TaskToken;

                  const params = {
                      output: "\"Callback task completed successfully.\"",
                      taskToken: taskToken
                  };

                  /**
                  * uncomment the lines below and redeploy the Lambda function
                  */
                  // console.log(`Calling Step Functions to complete callback task with params ${JSON.stringify(params)}`);
                  // let response = await stepfunctions.sendTaskSuccess(params).promise();
              }
          };

      Runtime: 'nodejs14.x'
      Timeout: '25'

  M4StatesExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref M4SNSTopic
        - PolicyName: SQSSendMessagePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt [M4SQSQueue, Arn]

  M4WaitForCallbackStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "An example of the Amazon States Language for starting a task and waiting for a callback.",
            "StartAt": "Start Task And Wait For Callback",
            "States": {
              "Start Task And Wait For Callback": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "Parameters": {
                  "QueueUrl": "${sqsQueueUrl}",
                  "MessageBody": {
                    "MessageTitle": "Task started by Step Functions. Waiting for callback with task token.",
                    "TaskToken.$": "$$.Task.Token"
                  }
                },
                "Next": "Notify Success",
                "Catch": [
                {
                  "ErrorEquals": [ "States.ALL" ],
                  "Next": "Notify Failure"
                }
                ]
              },
              "Notify Success": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": "Callback received. Task started by Step Functions succeeded.",
                  "TopicArn": "${SimpleLambdaFunctionArn}"
                },
                "End": true
              },
              "Notify Failure": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": "Task started by Step Functions failed.",
                  "TopicArn": "${SimpleLambdaFunctionArn}"
                },
                "End": true
              }
            }
          }

        - {
            SimpleLambdaFunctionArn: !Ref M4SNSTopic,
            sqsQueueUrl: !Ref M4SQSQueue,
          }
      RoleArn: !GetAtt [M4StatesExecutionRole, Arn]

  M5MapStateStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub
        - |-
          {
          "StartAt": "HelloWorld",
          "States": {
          "HelloWorld": {
          "Type": "Pass",
          "Result": "Hello World!",
           "End": true
            }
           }
          }
        - {
            DDBTable: !Ref M5DDBTable,
            SNSTopic: !Ref M5SNSTopic,
            ReadFromSQSQueueLambda: !Ref M5ReadFromSQSQueueLambda,
            DeleteFromSQSQueueLambda: !Ref M5DeleteFromSQSQueueLambda,
          }
      RoleArn: !GetAtt [M5StatesExecutionRole, Arn]
  M5StatesExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt M5ReadFromSQSQueueLambda.Arn
                  - !GetAtt M5DeleteFromSQSQueueLambda.Arn
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource:
                  - !GetAtt M5DDBTable.Arn
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref M5SNSTopic
  M5ReadFromSQSQueueLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt [M5SQSLambdaExecutionRole, Arn]
      Code:
        ZipFile: !Sub
          - |-
            const aws = require('aws-sdk');

            exports.lambda_handler = (event, context, callback) => {
              const sqs = new aws.SQS();

              sqs.receiveMessage({
                QueueUrl: '${sqsQueueURL}',
                AttributeNames: ['All'],
                MaxNumberOfMessages: '10',
                VisibilityTimeout: '30',
                WaitTimeSeconds: '20'
              }).promise()
                .then(data => {
                  if (!data.Messages) {
                    callback(null, "No messages");
                  } else {
                    callback(null, data.Messages);
                  }
                })
                .catch(err => {
                  callback(err);
                });
            };
          - { sqsQueueURL: !Ref M5SQSQueue }
      Runtime: 'nodejs12.x'
      Timeout: '60'
      FunctionName: 'MapStateReadFromSQSQueueLambda'
  M5DeleteFromSQSQueueLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Role: !GetAtt [M5SQSLambdaExecutionRole, Arn]
      Code:
        ZipFile: !Sub
          - |-
            const aws = require('aws-sdk');

            exports.lambda_handler = (event, context, callback) => {
              const sqs = new aws.SQS();

              sqs.deleteMessage({
                QueueUrl: '${sqsQueueURL}',
                ReceiptHandle: event.ReceiptHandle
              }).promise()
                .then(data => {
                  callback(null, data);
                })
                .catch(err => {
                  callback(err);
                });
            };
          - { sqsQueueURL: !Ref M5SQSQueue }
      Runtime: 'nodejs12.x'
      Timeout: '20'
      FunctionName: 'MapStateDeleteFromSQSQueueLambda'
  M5SQSLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaSQSQueuePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                Resource: !GetAtt M5SQSQueue.Arn
  M5DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      AttributeDefinitions:
        - AttributeName: 'MessageId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'MessageId'
          KeyType: 'HASH'
      TableName: 'MapStateTable'
  M5SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'MapStateQueueforMessages'
  M5SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'MapStateTopicforMessages'

  M6HelloFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloFunction
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - M6HelloFunctionRole
          - Arn
      Code:
        ZipFile:
          "/** \n\nMIT No Attribution \n\nCopyright 2021 Amazon Web Services
          \n\nPermission is hereby granted, free of charge, to any person obtaining
          a copy of this software and associated documentation files (the \"Software\"),
          to deal in the Software without restriction, including without limitation
          the rights to use, copy, modify, merge, publish, distribute, sublicense,
          and/or sell copies of the Software, and to permit persons to whom the Software
          is furnished to do so. \n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY
          OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
          OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
          ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
          DEALINGS IN THE SOFTWARE. \n\n*/\n\nexports.handler = (event, context, callback)
          => {\n callback(null, \"Hello, \" + event.who + \"!\");\n};"
      Runtime: nodejs12.x
      Timeout: 300
  M6HelloFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  M6InputOuputProcessingStepFuntionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InputOuputProcessingStepFuntionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: StepFunctionIOProcessingRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'

  M7StatesExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
      RoleName: UniversalSDKRoleNameforStepfunctions
  M7S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join
        - '-'
        - - 'univesalsdkintegrationbucket'
          - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - '/'
                  - !Ref 'AWS::StackId'

Outputs:
  M1StateMachineArn:
    Value:
      Ref: M1TimerStateMachine
  M1ExecutionInput:
    Description: Sample input to StartExecution.
    Value: '{ "timer_seconds": 10 }'
  M2StateMachineArn:
    Value:
      Ref: M2RequestResponseStateMachine
  M2ExecutionInput:
    Description: Sample input to StartExecution.
    Value: !Sub
      - |-
        {
          "topic": "${topicArn}",
          "message": "HelloWorld",
          "timer_seconds": 10
        }
      - { topicArn: !Ref M2SNSTopic }
  M3StateMachineArn:
    Value: !Ref M3BatchJobNotificationStateMachine
  M3ExecutionInput:
    Description: Sample input to StartExecution.
    Value: >
      {}
  M4StateMachineArn:
    Value:
      Ref: M4WaitForCallbackStateMachine
  M4ExecutionInput:
    Description: Sample input to StartExecution.
    Value: >
      {}
  M5StateMachineArn:
    Value:
      Ref: M5MapStateStateMachine
  M5ExecutionInput:
    Description: Sample input to StartExecution.
    Value: '{}'
